// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to call rust native functions
class FilCodecBindings {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  FilCodecBindings(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.Int8> tx_decode(
    ffi.Pointer<ffi.Int8> cbor,
    int testnet,
  ) {
    _tx_decode ??=
        _dylib.lookupFunction<_c_tx_decode, _dart_tx_decode>('tx_decode');
    return _tx_decode(
      cbor,
      testnet,
    );
  }

  _dart_tx_decode _tx_decode;

  ffi.Pointer<ffi.Int8> tx_encode(
    ffi.Pointer<ffi.Int8> json,
  ) {
    _tx_encode ??=
        _dylib.lookupFunction<_c_tx_encode, _dart_tx_encode>('tx_encode');
    return _tx_encode(
      json,
    );
  }

  _dart_tx_encode _tx_encode;

  ffi.Pointer<ffi.Int8> public_key_to_address(
    ffi.Pointer<ffi.Int8> pubkey,
    int testnet,
  ) {
    _public_key_to_address ??= _dylib.lookupFunction<_c_public_key_to_address,
        _dart_public_key_to_address>('public_key_to_address');
    return _public_key_to_address(
      pubkey,
      testnet,
    );
  }

  _dart_public_key_to_address _public_key_to_address;

  void ffi_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _ffi_free ??=
        _dylib.lookupFunction<_c_ffi_free, _dart_ffi_free>('ffi_free');
    return _ffi_free(
      ptr,
    );
  }

  _dart_ffi_free _ffi_free;

  void ffi_dummy() {
    _ffi_dummy ??=
        _dylib.lookupFunction<_c_ffi_dummy, _dart_ffi_dummy>('ffi_dummy');
    return _ffi_dummy();
  }

  _dart_ffi_dummy _ffi_dummy;
}

typedef _c_tx_decode = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> cbor,
  ffi.Int32 testnet,
);

typedef _dart_tx_decode = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> cbor,
  int testnet,
);

typedef _c_tx_encode = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> json,
);

typedef _dart_tx_encode = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> json,
);

typedef _c_public_key_to_address = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> pubkey,
  ffi.Int32 testnet,
);

typedef _dart_public_key_to_address = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> pubkey,
  int testnet,
);

typedef _c_ffi_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_ffi_free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_ffi_dummy = ffi.Void Function();

typedef _dart_ffi_dummy = void Function();
