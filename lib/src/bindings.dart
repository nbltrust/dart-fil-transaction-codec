// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to call rust native functions
class FilCodecBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FilCodecBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FilCodecBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> tx_decode(
    ffi.Pointer<ffi.Char> cbor,
    int testnet,
  ) {
    return _tx_decode(
      cbor,
      testnet,
    );
  }

  late final _tx_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('tx_decode');
  late final _tx_decode = _tx_decodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> tx_encode(
    ffi.Pointer<ffi.Char> json,
  ) {
    return _tx_encode(
      json,
    );
  }

  late final _tx_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tx_encode');
  late final _tx_encode = _tx_encodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tx_digest(
    ffi.Pointer<ffi.Char> cbor,
  ) {
    return _tx_digest(
      cbor,
    );
  }

  late final _tx_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tx_digest');
  late final _tx_digest = _tx_digestPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> public_key_to_address(
    ffi.Pointer<ffi.Char> pubkey,
    int testnet,
  ) {
    return _public_key_to_address(
      pubkey,
      testnet,
    );
  }

  late final _public_key_to_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('public_key_to_address');
  late final _public_key_to_address = _public_key_to_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void ffi_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ffi_free(
      ptr,
    );
  }

  late final _ffi_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_free');
  late final _ffi_free =
      _ffi_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ffi_dummy() {
    return _ffi_dummy();
  }

  late final _ffi_dummyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ffi_dummy');
  late final _ffi_dummy = _ffi_dummyPtr.asFunction<void Function()>();
}
